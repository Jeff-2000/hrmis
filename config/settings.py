"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url


ENVIRONMENT = config("ENVIRONMENT", default="development")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-tvc1pfafb!66!2!2%1#@ox1zsj-b=fja%(sikhii+1hvip94nv'

SECRET_KEY = config("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

INSTALLED_APPS += [
    # ... Main Django apps
    'main',
    'authentication',
    'employee',
    'attendance',
    'documents',
    'notifications',
    'payroll',
    'leave',
    'situation',
    'audit',
    'analytics',
    'a_account',
    'integrations',
]

INSTALLED_APPS += [
    # ...
    'rest_framework_simplejwt',  # JWT authentication
    'oauth2_provider',        # Django OAuth Toolkit for OAuth2
    'rest_framework',
    'django_filters',
    'drf_yasg',               # for API documentation
    'tailwind',
    'theme',
]

if DEBUG:
    INSTALLED_APPS += [
        'django_browser_reload',
        # 'rest_framework.authtoken',
        'auditlog',  # for audit logging
    ]

TAILWIND_APP_NAME = 'theme'

AUTH_USER_MODEL = 'authentication.User'  # use our custom user model

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    ".ngrok-free.app",  # allows any ngrok subdomain
    "*",
    "https://c933e0e06566dece544fd8f6567f7341.serveo.net",  # example serveo URL
]
ALLOWED_HOSTS += ["c933e0e06566dece544fd8f6567f7341.serveo.net"]

# APPEND_SLASH = False

OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read access to protected resources',
        'write': 'Write access to protected resources',
        'profile': 'Access to user profile information',
    },
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600, # 1 hour
    'REFRESH_TOKEN_EXPIRE_SECONDS': 86400, # 1 day
    'USER_MODEL': 'authentication.User', # Explicitly tell OAuth2 Toolkit your custom user model
}

if ENVIRONMENT == 'production':
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework_simplejwt.authentication.JWTAuthentication',
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 10,
        'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    }
else:
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework_simplejwt.authentication.JWTAuthentication',
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 10,
        'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'auditlog.middleware.AuditlogMiddleware', # Middleware for audit logging
]

if DEBUG:
    # Add django_browser_reload middleware only in DEBUG mode
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'main.context_processors.unread_notifications_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

POSTGRESS_LOCALLY = False

if ENVIRONMENT == 'production' or not POSTGRESS_LOCALLY:
    DATABASES['default'] = dj_database_url.config(
        default=config('RENDER_EXTERNAL_DATABASE_URL')
    )

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "theme/static",
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Production static files
STATIC_ROOT = BASE_DIR / "staticfiles"

# Optional: enable compressed files for faster loading
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Authentication settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'  # Redirect to homepage after login
LOGOUT_REDIRECT_URL = '/login/'  # Redirect to login page after logout

if DEBUG:
    # Development settings
    SITE_URL="http://127.0.0.1:8000"

# settings.py excerpt
if DEBUG:
    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
else:
    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')
    CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')

from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    'daily-attendance-reconciliation': {
        'task': 'attendance.tasks.daily_attendance_reconciliation',
        'schedule': 24*3600,  # every 24 hours
    },
    'check-document-expiry-weekly': {
        'task': 'documents.tasks.check_document_expiry',
        'schedule': 7*24*3600,  # every week
    },
    'check-leaverequest-contract-document-expiry-weekly': {
        'task': 'documents.tasks.check_ContractOrLeaveRequest_document_expiry',
        'schedule': 7*24*3600,  # every week
        # 'schedule': crontab(minute='*/1'),  # every 1 minute
    },
    'monthly-payroll': {
        'task': 'payroll.tasks.process_monthly_payroll',
        'schedule': 30*24*3600,  # approximate monthly
    },
    'daily-situation-monitor': {
        'task': 'situation.tasks.monitor_situations',
        # 'schedule': 24*3600, 
        'schedule': crontab(hour=0, minute=0),
    },
    'daily-leave-reminder': {
        'task': 'leave.tasks.upcoming_leave_reminder',
        'schedule': 24*3600,
    },
    "analytics-refresh-5min": {
        "task": "analytics.tasks.refresh_analytics_caches",
        "schedule": crontab(minute="*/5"),
    },
    'spot-check-cache-integrity': {
        'task': 'analytics.tasks.spot_check_cache_integrity',
        'schedule': crontab(minute=0, hour='*/1'),  # every 1 hours
    },
    'check_contract_expiry': {
        'task': 'documents.tasks.check_contract_expiry',
        'schedule': crontab(day_of_month='1', hour=0, minute=0),  # first day of the month at midnight
    },
}


# If you use Redis:
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "TIMEOUT": 300,  # 5 minutes
        "KEY_PREFIX": "config",  # optional prefix to avoid key collisions
        
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'authentication': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

APPEND_SLASH = True

# Audit logging settings
AUDITLOG_ENABLED = True  # Enable audit logging
# Example: client sends X-Correlation-ID header
if not DEBUG:
    AUDITLOG_CID_HEADER = "HTTP_X_CORRELATION_ID"  # Use this header for correlation ID in production
else:
    # In development, you might not have this header set, so use a default value
    # This is useful for testing purposes
    AUDITLOG_CID_HEADER = "HTTP_X_REQUEST_ID"  # Use a different header for development 


# Notification settings
# Twilio
TWILIO_ACCOUNT_SID = config("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = config("TWILIO_AUTH_TOKEN")
TWILIO_FROM = config("TWILIO_FROM")
TWILIO_WHATSAPP_FROM = config("TWILIO_WHATSAPP_FROM")
NOTIFY_TWILIO_CALLBACK = config("NOTIFY_TWILIO_CALLBACK")
TWILIO_VALIDATE_WEBHOOKS = True  # Set to True to validate incoming webhooks

# WhatsApp
WHATSAPP_TOKEN = config("WHATSAPP_TOKEN")
WHATSAPP_PHONE_NUMBER_ID = config("WHATSAPP_PHONE_NUMBER_ID")
WHATSAPP_WEBHOOK_VERIFY_TOKEN = config("WHATSAPP_WEBHOOK_VERIFY_TOKEN")
NOTIFY_WHATSAPP_CALLBACK = config("NOTIFY_WHATSAPP_CALLBACK")

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Swagger / ReDoc customization (drf-yasg)
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": True,   # allows “Authorize” via session if logged in Django admin
    "LOGIN_URL": "/admin/login/",
    "LOGOUT_URL": "/admin/logout/",
    "DOC_EXPANSION": "list",                # 'none' | 'list' | 'full'
    "DEFAULT_MODEL_RENDERING": "model",
    "DEFAULT_MODEL_DEPTH": 2,
    "PERSIST_AUTHORIZATION": True,          # keep the bearer token in the UI during reloads
    "REFETCH_SCHEMA_WITH_AUTH": True,
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        # If you use JWT (“Authorization: Bearer <token>”)
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'",
        },
        # Optional: cookie auth when using sessionid
        "CookieAuth": {"type": "apiKey", "in": "cookie", "name": "sessionid"},
        # Optional: CSRF header for browsable API POSTs when using SessionAuthentication
        "X-CSRFToken": {"type": "apiKey", "name": "X-CSRFToken", "in": "header"},
    },
    "DOC_EXPANSION": "none",     # or "list", "full"
    "SHOW_REQUEST_DURATION": True,
    "VALIDATOR_URL": None,       # offline validation
}